function (setup_log project_name function)
    get_property(log_project_stack GLOBAL PROPERTY LOG_PROJECT_NAME)
    list(APPEND log_project_stack ${project_name})
    set_property (GLOBAL PROPERTY LOG_PROJECT_NAME ${log_project_stack})
    
    get_property(log_function_stack GLOBAL PROPERTY LOG_CALLER_NAME)
    list(APPEND log_function_stack ${function})
    set_property (GLOBAL PROPERTY LOG_CALLER_NAME ${log_function_stack})

    internal_log (trace ${CMAKE_CURRENT_FUNCTION} "Switching log context with: ${project_name} ${function}")
endfunction()

function (pop_log)
    get_property(log_function_stack GLOBAL PROPERTY LOG_CALLER_NAME)

    if (NOT log_function_stack)
        message (SEND_ERROR "(pop_log) Log function stack not found")
    else ()
        list(POP_BACK log_function_stack)
    endif ()

    get_property(log_project_stack GLOBAL PROPERTY LOG_PROJECT_NAME)
    if (NOT log_project_stack)
        message (SEND_ERROR "(pop_log) Log project stack not found")
    else ()
        list(POP_BACK log_project_stack)
    endif ()

    set_property (GLOBAL PROPERTY LOG_CALLER_NAME ${log_function_stack})
    set_property (GLOBAL PROPERTY LOG_PROJECT_NAME ${log_project_stack})
    internal_log (trace ${CMAKE_CURRENT_FUNCTION} "Poping log context")
endfunction ()

function (internal_log level log_function message)
    set (cmake_level STATUS)
    if ("${level}" STREQUAL "trace")
        set (cmake_level TRACE)
    elseif ("${level}" STREQUAL "verb")
        set (cmake_level VERBOSE)
    elseif ("${level}" STREQUAL "debug")
        set (cmake_level DEBUG)
    elseif ("${level}" STREQUAL "info")
        set (cmake_level STATUS)
    elseif ("${level}" STREQUAL "warn")
        set (cmake_level WARNING)
    elseif ("${level}" STREQUAL "error")
        set (cmake_level SEND_ERROR)
    elseif ("${level}" STREQUAL "fatal")
        set (cmake_level SEND_ERROR)
    else ()
        message (${SEND_ERROR} "Unable to determine log level: [${level}] > (${log_function}) | ${message}")
    endif ()

    message (${cmake_level} "[${level}] (${log_function}) | ${message}")
endfunction ()

function (log level message)
    get_property(log_project_stack GLOBAL PROPERTY LOG_PROJECT_NAME)
    if (NOT log_project_stack)
        set (log_project "unknow")
    else ()
        list(LENGTH log_project_stack list_len)
        math(EXPR index "${list_len} - 1")
        list(GET log_project_stack ${index} log_project)
    endif ()

    get_property(log_function_stack GLOBAL PROPERTY LOG_CALLER_NAME)
    if (NOT log_function_stack)
        message (SEND_ERROR "Log function stack not found | ${level} > ${message}")
    else ()
        list(LENGTH log_function_stack list_len)
        math(EXPR index "${list_len} - 1")
        list(GET log_function_stack ${index} log_function)
    endif ()

    internal_log (${level} ${log_function} "${log_project}: ${message}")
endfunction ()